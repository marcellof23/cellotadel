apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-init
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-init-token-review
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: vault-init
    namespace: vault
---
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init
  namespace: vault
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    metadata:
      name: vault-init
    spec:
      serviceAccountName: vault-init
      restartPolicy: OnFailure
      containers:
        - name: vault-init
          image: hashicorp/vault:1.15.6
          command:
            - /bin/sh
            - -c
            - |
              set -e
              
              export VAULT_ADDR='http://vault.vault.svc.cluster.local:8200'
              export VAULT_TOKEN='root'
              
              # Wait for Vault to be ready
              echo "Waiting for Vault to be ready..."
              until vault status >/dev/null 2>&1; do
                echo "Vault not ready yet, waiting..."
                sleep 2
              done
              
              echo "Vault is ready!"
              
              # Check if Kubernetes auth is already enabled
              if vault auth list | grep -q "kubernetes/"; then
                echo "Kubernetes auth already enabled"
              else
                echo "Enabling Kubernetes auth..."
                vault auth enable kubernetes
              fi
              
              # Configure Kubernetes auth
              echo "Configuring Kubernetes auth..."
              vault write auth/kubernetes/config \
                kubernetes_host="https://kubernetes.default.svc"
              
              # Create policy for reading secrets
              echo "Creating policies..."
              vault policy write immich-policy - <<EOF
              path "secret/data/immich" {
                capabilities = ["read"]
              }
              EOF
              
              # You can add more policies here for other apps
              # vault policy write myapp-policy - <<EOF
              # path "secret/data/myapp" {
              #   capabilities = ["read"]
              # }
              # EOF
              
              # Create role that binds the policy to ESO Service Account
              echo "Creating Kubernetes auth role..."
              vault write auth/kubernetes/role/external-secrets \
                bound_service_account_names=external-secrets \
                bound_service_account_namespaces=external-secrets \
                policies=immich-policy \
                ttl=24h
              
              echo "Vault initialization complete!"

